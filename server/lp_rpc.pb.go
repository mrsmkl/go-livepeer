// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/lp_rpc.proto

package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TranscoderRequest struct {
	JobId                int64    `protobuf:"varint,1,opt,name=jobId" json:"jobId,omitempty"`
	Sig                  []byte   `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TranscoderRequest) Reset()         { *m = TranscoderRequest{} }
func (m *TranscoderRequest) String() string { return proto.CompactTextString(m) }
func (*TranscoderRequest) ProtoMessage()    {}
func (*TranscoderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lp_rpc_9ba86f74e41b9665, []int{0}
}
func (m *TranscoderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranscoderRequest.Unmarshal(m, b)
}
func (m *TranscoderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranscoderRequest.Marshal(b, m, deterministic)
}
func (dst *TranscoderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranscoderRequest.Merge(dst, src)
}
func (m *TranscoderRequest) XXX_Size() int {
	return xxx_messageInfo_TranscoderRequest.Size(m)
}
func (m *TranscoderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TranscoderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TranscoderRequest proto.InternalMessageInfo

func (m *TranscoderRequest) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *TranscoderRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type TranscoderReply struct {
	Transcoder           string   `protobuf:"bytes,1,opt,name=transcoder" json:"transcoder,omitempty"`
	ManifestUri          string   `protobuf:"bytes,2,opt,name=manifestUri" json:"manifestUri,omitempty"`
	AuthType             string   `protobuf:"bytes,3,opt,name=authType" json:"authType,omitempty"`
	Credentials          string   `protobuf:"bytes,4,opt,name=credentials" json:"credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TranscoderReply) Reset()         { *m = TranscoderReply{} }
func (m *TranscoderReply) String() string { return proto.CompactTextString(m) }
func (*TranscoderReply) ProtoMessage()    {}
func (*TranscoderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_lp_rpc_9ba86f74e41b9665, []int{1}
}
func (m *TranscoderReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranscoderReply.Unmarshal(m, b)
}
func (m *TranscoderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranscoderReply.Marshal(b, m, deterministic)
}
func (dst *TranscoderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranscoderReply.Merge(dst, src)
}
func (m *TranscoderReply) XXX_Size() int {
	return xxx_messageInfo_TranscoderReply.Size(m)
}
func (m *TranscoderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TranscoderReply.DiscardUnknown(m)
}

var xxx_messageInfo_TranscoderReply proto.InternalMessageInfo

func (m *TranscoderReply) GetTranscoder() string {
	if m != nil {
		return m.Transcoder
	}
	return ""
}

func (m *TranscoderReply) GetManifestUri() string {
	if m != nil {
		return m.ManifestUri
	}
	return ""
}

func (m *TranscoderReply) GetAuthType() string {
	if m != nil {
		return m.AuthType
	}
	return ""
}

func (m *TranscoderReply) GetCredentials() string {
	if m != nil {
		return m.Credentials
	}
	return ""
}

type AuthToken struct {
	JobId                int64    `protobuf:"varint,1,opt,name=jobId" json:"jobId,omitempty"`
	Sig                  []byte   `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthToken) Reset()         { *m = AuthToken{} }
func (m *AuthToken) String() string { return proto.CompactTextString(m) }
func (*AuthToken) ProtoMessage()    {}
func (*AuthToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_lp_rpc_9ba86f74e41b9665, []int{2}
}
func (m *AuthToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthToken.Unmarshal(m, b)
}
func (m *AuthToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthToken.Marshal(b, m, deterministic)
}
func (dst *AuthToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthToken.Merge(dst, src)
}
func (m *AuthToken) XXX_Size() int {
	return xxx_messageInfo_AuthToken.Size(m)
}
func (m *AuthToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthToken.DiscardUnknown(m)
}

var xxx_messageInfo_AuthToken proto.InternalMessageInfo

func (m *AuthToken) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *AuthToken) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type SegData struct {
	Seq                  int64    `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Hash                 []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Sig                  []byte   `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegData) Reset()         { *m = SegData{} }
func (m *SegData) String() string { return proto.CompactTextString(m) }
func (*SegData) ProtoMessage()    {}
func (*SegData) Descriptor() ([]byte, []int) {
	return fileDescriptor_lp_rpc_9ba86f74e41b9665, []int{3}
}
func (m *SegData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegData.Unmarshal(m, b)
}
func (m *SegData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegData.Marshal(b, m, deterministic)
}
func (dst *SegData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegData.Merge(dst, src)
}
func (m *SegData) XXX_Size() int {
	return xxx_messageInfo_SegData.Size(m)
}
func (m *SegData) XXX_DiscardUnknown() {
	xxx_messageInfo_SegData.DiscardUnknown(m)
}

var xxx_messageInfo_SegData proto.InternalMessageInfo

func (m *SegData) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *SegData) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *SegData) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func init() {
	proto.RegisterType((*TranscoderRequest)(nil), "server.TranscoderRequest")
	proto.RegisterType((*TranscoderReply)(nil), "server.TranscoderReply")
	proto.RegisterType((*AuthToken)(nil), "server.AuthToken")
	proto.RegisterType((*SegData)(nil), "server.SegData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrchestratorClient interface {
	// Gets transcoder information for a job
	GetTranscoder(ctx context.Context, in *TranscoderRequest, opts ...grpc.CallOption) (*TranscoderReply, error)
}

type orchestratorClient struct {
	cc *grpc.ClientConn
}

func NewOrchestratorClient(cc *grpc.ClientConn) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) GetTranscoder(ctx context.Context, in *TranscoderRequest, opts ...grpc.CallOption) (*TranscoderReply, error) {
	out := new(TranscoderReply)
	err := c.cc.Invoke(ctx, "/server.Orchestrator/GetTranscoder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServer is the server API for Orchestrator service.
type OrchestratorServer interface {
	// Gets transcoder information for a job
	GetTranscoder(context.Context, *TranscoderRequest) (*TranscoderReply, error)
}

func RegisterOrchestratorServer(s *grpc.Server, srv OrchestratorServer) {
	s.RegisterService(&_Orchestrator_serviceDesc, srv)
}

func _Orchestrator_GetTranscoder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscoderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetTranscoder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Orchestrator/GetTranscoder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetTranscoder(ctx, req.(*TranscoderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Orchestrator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.Orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTranscoder",
			Handler:    _Orchestrator_GetTranscoder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/lp_rpc.proto",
}

func init() { proto.RegisterFile("server/lp_rpc.proto", fileDescriptor_lp_rpc_9ba86f74e41b9665) }

var fileDescriptor_lp_rpc_9ba86f74e41b9665 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x89, 0xa9, 0xd5, 0x8c, 0x15, 0x75, 0x15, 0x8c, 0x3d, 0x48, 0xc8, 0xa9, 0xa7, 0x08,
	0xf6, 0xe8, 0xa9, 0x28, 0x88, 0x27, 0x61, 0x5b, 0xcf, 0xb2, 0x4d, 0xc6, 0x26, 0x1a, 0xb3, 0xdb,
	0xd9, 0xa9, 0x90, 0x9f, 0xe1, 0x3f, 0x96, 0x6c, 0x6a, 0x0c, 0xe8, 0xc1, 0xdb, 0xcc, 0xf7, 0xe6,
	0x3d, 0xd8, 0xb7, 0x70, 0x6a, 0x91, 0x3e, 0x90, 0xae, 0x4a, 0xf3, 0x4c, 0x26, 0x4d, 0x0c, 0x69,
	0xd6, 0x62, 0xd8, 0xc2, 0xf8, 0x06, 0x4e, 0x16, 0xa4, 0x2a, 0x9b, 0xea, 0x0c, 0x49, 0xe2, 0x7a,
	0x83, 0x96, 0xc5, 0x19, 0xec, 0xbe, 0xea, 0xe5, 0x43, 0x16, 0x7a, 0x91, 0x37, 0xf1, 0x65, 0xbb,
	0x88, 0x63, 0xf0, 0x6d, 0xb1, 0x0a, 0x77, 0x22, 0x6f, 0x32, 0x92, 0xcd, 0x18, 0x7f, 0x7a, 0x70,
	0xd4, 0x77, 0x9b, 0xb2, 0x16, 0x97, 0x00, 0xdc, 0x21, 0x17, 0x10, 0xc8, 0x1e, 0x11, 0x11, 0x1c,
	0xbc, 0xab, 0xaa, 0x78, 0x41, 0xcb, 0x4f, 0x54, 0xb8, 0xb4, 0x40, 0xf6, 0x91, 0x18, 0xc3, 0xbe,
	0xda, 0x70, 0xbe, 0xa8, 0x0d, 0x86, 0xbe, 0x93, 0xbb, 0xbd, 0x71, 0xa7, 0x84, 0x19, 0x56, 0x5c,
	0xa8, 0xd2, 0x86, 0x83, 0xd6, 0xdd, 0x43, 0xf1, 0x14, 0x82, 0x59, 0x73, 0xad, 0xdf, 0xb0, 0xfa,
	0xf7, 0x43, 0x66, 0xb0, 0x37, 0xc7, 0xd5, 0x9d, 0x62, 0xe5, 0x44, 0x5c, 0x6f, 0x0d, 0xcd, 0x28,
	0x04, 0x0c, 0x72, 0x65, 0xf3, 0xed, 0xbd, 0x9b, 0xbf, 0x23, 0xfc, 0x2e, 0xe2, 0x7a, 0x0e, 0xa3,
	0x47, 0x4a, 0x73, 0xb4, 0x4c, 0x8a, 0x35, 0x89, 0x5b, 0x38, 0xbc, 0x47, 0xfe, 0x69, 0x47, 0x5c,
	0x24, 0x6d, 0xe5, 0xc9, 0xaf, 0xbe, 0xc7, 0xe7, 0x7f, 0x49, 0xa6, 0xac, 0x97, 0x43, 0xf7, 0x59,
	0xd3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x7b, 0x25, 0x50, 0xc3, 0x01, 0x00, 0x00,
}
